% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/data_model.R
\name{data_model}
\alias{data_model}
\title{Build data model}
\usage{
data_model(
  colClasses,
  default.val = NULL,
  default.fun = NULL,
  default.arg = NULL,
  filter = NULL,
  skip = NULL
)
}
\arguments{
\item{colClasses}{a \emph{mandatory} named vector of classes, defining the data model.}

\item{default.val}{an optional named vector of values, defining the default values.}

\item{default.fun}{an optional named vector of functions, defining the default functions to be used to generate default values.}

\item{default.arg}{an optional named vector of arguments, to pass along with the default function.}

\item{filter}{an optional character vector, indicating which attribute names should be filtered from the table view.}

\item{skip}{an optional character vector, indicating which attribute names should be skipped from the user input form.}
}
\value{
a data.frame containing the data model.
}
\description{
Build data model
}
\details{
colClasses will be used to create the data.frame: names will define the attributes of the data model,
and values will define the class (type) of the attributes.

All default.* parameters are optional. When provided, they will be used to match with names defined in colClasses:
\itemize{
\item order in those vectors doesn't matter
\item there is no need to set values for all attributes (see examples)
\item names in vectors not matching with colClasses names will be ignored
}

default.fun and default.val are mutual exclusive, with priority on default.fun (default.val will be forced to NA)
default.arg requires default.fun not to be NULL (will be forced to NA otherwise)

filter and skip directly contains the names of the attributes to set to TRUE

If not provided, defaults will be applied:
\itemize{
\item NA for default.val, default.fun and default.arg
\item FALSE for filter and skip
}
}
\examples{
# order in vectors doesn't matter:
default.val <- c("name" = "test", "total" = 2)
default.val <- c("total" = 2, "name" = "test")

# no need to set all values
colClasses <- c("id" = "numeric", "name" = "character", "total" = "numeric")
default.val <- c("name" = "test", "total" = 2)

# filter and skip
filter <- "id"
skip <- c("id", "date") for example

data_model(colClasses, default.val, filter = filter, skip = skip)

}
